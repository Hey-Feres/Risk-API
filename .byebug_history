continue
MAX_QNT_OF_TRANSACTION_IN_ROW
transactions.in_date_range(time_query_from, time_query_to).count
transactions.in_date_range(time_query_from, time_query_to).count > MAX_QNT_OF_TRANSACTION_IN_ROW
transactions.in_date_range(time_query_from, time_query_to)
continue
transactions.in_date_range(time_query_from, time_query_to)
continue
Transaction.create(
          external_id: params[:transaction_id] + i,
          merchant_id: params[:merchant_id],
          card_number: params[:card_number],
          date: params[:transaction_date],
          amount: params[:transaction_amount],
          rejected_by_antifraud: false,
          user: user
        )
Transaction.create(
        external_id: params[:transaction_id] + i,
        merchant_id: params[:merchant_id],
        card_number: params[:card_number],
        date: params[:transaction_date],
        amount: params[:transaction_amount],
        rejected_by_antifraud: false,
        user: user)
      end
continue
user.transactions
transactions.in_date_range(time_query_from, time_query_to).count > MAX_QNT_OF_TRANSACTION_IN_ROW
transactions.in_date_range(time_query_from, time_query_to).count
transactions.in_date_range(time_query_from, time_query_to).count > MAX_QNT_OF_REJECTED_TRANSACTION_IN_ROW
continue
uknown_device
continue
uknown_device
continue
new_device_merchant_and_card
continue
params[:merchant_id]
user.previous_merchants
uknown_device
continue
uknown_device
continue
uknown_device
uknown_device = true unless user.previous_devices.include? params[:device_id]
uknown_device
params[:device_id]
user.previous_devices.include? params[:device_id]
user.previous_devices
continue
uknown_card
new_merchant
uknown_device
new_device_merchant_and_card
amount_too_high
user_has_previous_chargeback
continue
user.previous_devices.include? params[:device_id]
params[:device_id]
user.previous_devices
continue
uknown_card
new_merchant
uknown_device
continue
Transaction.average_amount_for_user(user)
user
params[:transaction_amount] = 251
      described_class.new(user, params).call
      params[:transaction_amount] = 363
      described_class.new(user, params).call
      params[:transaction_amount] = 172
      described_class.new(user, params).call
continue
user_has_previous_chargeback
continue
NIGH_HOURS.include? transaction_date.hour
NIGH_HOURS
continue
params['transaction_id']
params
continue
transaction_date
(transaction_date + 6.hours).hour
transaction_date + 6.hours
transaction_date + 7.hours
transaction_date.hour
transaction_date
NIGHT_MAX_AMOUNT_ALLOWED
continue
transaction_activity_too_high
rejected_transaction_activity_too_high
continue
user.transactions.where(date: start_time..end_time).count
start_time = transaction_date - 5.minutes
    end_time   = transaction_date + 5.minutes
transaction_date = Time.zone.parse(params[:transaction_date])
user.transactions.where(date: start_time..end_time).count
end_time = params[:transaction_date].in_time_zone + 5.minutes
start_time = params[:transaction_date].in_time_zone - 5.minutes
continue
user.transactions.where(date: start_time..end_time).map &:date
user.transactions.where(date: start_time..end_time).count
end_time = params[:transaction_date].in_time_zone + 5.minutes
start_time = params[:transaction_date].in_time_zone - 5.minutes
continue
user.transactions.where('date >= ?', transaction_date - 10.minutes).count
user.transactions.where('date >= ?', transaction_date - 10.minutes)
transaction_date - 10.minutes
transaction_date = Time.zone.parse(params[:transaction_date])
transaction_activity_too_high
continue
transaction_date = Time.zone.parse(params[:transaction_date])
transaction_activity_too_high
new_device_merchant_and_card
amount_too_high
continue
rejected_transaction_activity_too_high
transaction_activity_too_high
new_device_merchant_and_card
amount_too_high
continue
user.transactions.where('date >= ?', transaction_date - 10.minutes).count > HIGH_TRANSACTION_ACTIVITY_QUANTITY
transaction_activity_too_high
new_device_merchant_and_card
amount_too_high
continue
Transaction.average_amount_for_user(user)
Transaction.average_amount_for_user(user) * 2
Transaction.average_amount_for_user(user)
amount_too_high
continue
user.transactions.last.date
transaction_date
user.transactions.where('date >= ?', transaction_date - 10.minutes)
transaction_date = Time.zone.parse(params[:transaction_date])
Transaction.last.created_at.class
Transaction.last.created_at
transaction_date - 10.minutes
user.transactions.where('date >= ?', transaction_date - 10.minutes)
10.minutes.from(transaction_dateuser.transactions.where('date >= ?', transaction_date - 10.minutes))
10.minutes.from(transaction_date)
user.transactions.where('date >= ?', 0.minutes.ago)
user.transactions.where('date >= ?', 10.minutes.ago)
transaction_date + 10.minutes
transaction_date - 10.minutes
transaction_date
result
transaction_date - 10.minutes
user.transactions.map &:date
user.transactions
user.transactions.where(date: (transaction_date - 10.minutes)..(transaction_date + 10.minutes)).count
transaction_date = Time.parse(params[:transaction_date])
Time.parse(params[:transaction_date])
params[:transaction_date]
transaction_date = DateTime.parse(params[:transaction_date])
continue
result['recommendation']
result
result[:recommendation]
continue
user.transactions.accepted.average(:amount)
continue
params[:transaction_amount]
params[:transaction_amount] > user.transactions.average(:amount) * 2
user.transactions.average(:amount)
user.transactions
continue
user.transactions
continue
transaction_params["transaction_amount"]
card_number = transaction_params["card_number"]
transaction_amount = transaction_params["transaction_amount"]
Time.parse(transaction_params["transaction_date"])
transaction_params["transaction_date"]
transaction_date = DateTime.parse(transaction_params["transaction_date"])
transaction_id = transaction_params["transaction_id"]
params
continue
params
transaction_params
transaction_id = transaction_params["transaction_id"]
